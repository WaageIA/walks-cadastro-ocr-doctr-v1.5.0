#!/usr/bin/env python3
"""
Script para iniciar o worker Celery com verifica√ß√µes robustas
"""

import os
import sys
import time
import redis
import logging
from celery_app import celery_app

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_redis_connection(max_retries=5, retry_delay=2):
    """
    Verifica conex√£o com Redis com retry autom√°tico
    
    Args:
        max_retries: N√∫mero m√°ximo de tentativas
        retry_delay: Delay entre tentativas em segundos
        
    Returns:
        bool: True se conectou com sucesso
    """
    redis_url = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
    
    for attempt in range(max_retries):
        try:
            logger.info(f"Tentativa {attempt + 1}/{max_retries} - Conectando ao Redis...")
            
            # Criar cliente Redis
            redis_client = redis.from_url(redis_url, socket_timeout=5, socket_connect_timeout=5)
            
            # Testar conex√£o
            redis_client.ping()
            
            # Testar opera√ß√µes b√°sicas
            test_key = "celery_worker_test"
            redis_client.set(test_key, "test_value", ex=10)
            value = redis_client.get(test_key)
            redis_client.delete(test_key)
            
            if value == b"test_value":
                logger.info("‚úÖ Conex√£o com Redis estabelecida e testada com sucesso")
                return True
            else:
                raise Exception("Falha no teste de opera√ß√µes Redis")
                
        except redis.ConnectionError as e:
            logger.warning(f"‚ùå Erro de conex√£o Redis (tentativa {attempt + 1}): {e}")
        except redis.TimeoutError as e:
            logger.warning(f"‚ùå Timeout na conex√£o Redis (tentativa {attempt + 1}): {e}")
        except Exception as e:
            logger.warning(f"‚ùå Erro inesperado Redis (tentativa {attempt + 1}): {e}")
        
        if attempt < max_retries - 1:
            logger.info(f"‚è≥ Aguardando {retry_delay}s antes da pr√≥xima tentativa...")
            time.sleep(retry_delay)
            retry_delay *= 1.5  # Backoff exponencial
    
    return False

def check_celery_broker():
    """Verifica se o Celery consegue se conectar ao broker"""
    try:
        logger.info("üîç Verificando conex√£o Celery com broker...")
        
        # Tentar ping no Celery
        ping_result = celery_app.control.ping(timeout=10)
        
        if ping_result:
            logger.info("‚úÖ Celery conectado ao broker com sucesso")
            return True
        else:
            logger.warning("‚ö†Ô∏è  Nenhum worker Celery respondeu ao ping")
            return True  # Ainda pode iniciar o primeiro worker
            
    except Exception as e:
        logger.error(f"‚ùå Erro na conex√£o Celery: {e}")
        return False

def validate_environment():
    """Valida vari√°veis de ambiente essenciais"""
    logger.info("üîß Validando vari√°veis de ambiente...")
    
    required_vars = {
        'OPENROUTER_API_KEY': 'Chave da API OpenRouter para OCR',
        'REDIS_URL': 'URL de conex√£o com Redis'
    }
    
    missing_vars = []
    
    for var, description in required_vars.items():
        value = os.getenv(var)
        if not value:
            missing_vars.append(f"  - {var}: {description}")
            logger.error(f"‚ùå {var} n√£o configurada")
        else:
            # Mascarar valores sens√≠veis nos logs
            if 'KEY' in var or 'PASSWORD' in var:
                masked_value = f"{value[:8]}..." if len(value) > 8 else "***"
                logger.info(f"‚úÖ {var}: {masked_value}")
            else:
                logger.info(f"‚úÖ {var}: {value}")
    
    if missing_vars:
        logger.error("‚ùå Vari√°veis de ambiente obrigat√≥rias n√£o configuradas:")
        for var in missing_vars:
            logger.error(var)
        logger.error("\nüí° Configure as vari√°veis e tente novamente:")
        logger.error("   export OPENROUTER_API_KEY='sua_chave_aqui'")
        logger.error("   export REDIS_URL='redis://localhost:6379/0'")
        return False
    
    logger.info("‚úÖ Todas as vari√°veis de ambiente est√£o configuradas")
    return True

def main():
    """Fun√ß√£o principal com verifica√ß√µes robustas"""
    logger.info("üîÑ Iniciando Celery Worker com verifica√ß√µes robustas")
    logger.info("=" * 60)
    
    # 1. Validar ambiente
    if not validate_environment():
        logger.error("‚ùå Falha na valida√ß√£o do ambiente")
        sys.exit(1)
    
    # 2. Verificar Redis
    if not check_redis_connection():
        logger.error("‚ùå N√£o foi poss√≠vel conectar ao Redis ap√≥s m√∫ltiplas tentativas")
        logger.error("üí° Solu√ß√µes poss√≠veis:")
        logger.error("   1. Verifique se o Redis est√° rodando: redis-server")
        logger.error("   2. Verifique a URL do Redis: echo $REDIS_URL")
        logger.error("   3. Teste a conex√£o: redis-cli ping")
        sys.exit(1)
    
    # 3. Verificar Celery
    if not check_celery_broker():
        logger.error("‚ùå Falha na verifica√ß√£o do Celery")
        sys.exit(1)
    
    # 4. Configura√ß√µes do worker
    worker_config = {
        'concurrency': int(os.getenv('CELERY_CONCURRENCY', '2')),
        'max_tasks_per_child': int(os.getenv('CELERY_MAX_TASKS_PER_CHILD', '10')),
        'loglevel': os.getenv('CELERY_LOG_LEVEL', 'info'),
        'queues': os.getenv('CELERY_QUEUES', 'ocr_queue'),
    }
    
    logger.info("üöÄ Configura√ß√£o do Worker:")
    for key, value in worker_config.items():
        logger.info(f"   {key}: {value}")
    
    logger.info("\nüìã Filas e Tarefas:")
    logger.info("   Filas: ocr_queue")
    logger.info("   Tarefas dispon√≠veis:")
    logger.info("     - process_documents_task")
    logger.info("     - process_single_document_task")
    logger.info("     - cleanup_old_results")
    
    logger.info("\n" + "=" * 60)
    logger.info("‚úÖ Worker pronto! Pressione Ctrl+C para parar")
    logger.info("=" * 60)
    
    try:
        # Iniciar worker com configura√ß√µes
        celery_app.worker_main([
            'worker',
            f'--loglevel={worker_config["loglevel"]}',
            f'--queues={worker_config["queues"]}',
            f'--concurrency={worker_config["concurrency"]}',
            f'--max-tasks-per-child={worker_config["max_tasks_per_child"]}',
            '--without-gossip',  # Reduz overhead de rede
            '--without-mingle',  # Reduz tempo de startup
            '--without-heartbeat',  # Para desenvolvimento
        ])
    except KeyboardInterrupt:
        logger.info("\nüëã Worker parado pelo usu√°rio")
    except Exception as e:
        logger.error(f"\n‚ùå Erro cr√≠tico no worker: {e}")
        logger.exception("Detalhes do erro:")
        sys.exit(1)

if __name__ == "__main__":
    main()
